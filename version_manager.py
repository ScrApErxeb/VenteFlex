import json
import os

VERSION_FILE = "version.json"

# Charger la version actuelle
def load_version():
    if os.path.exists(VERSION_FILE):
        with open(VERSION_FILE, "r") as file:
            return json.load(file)
    else:
        return {"version": [0, 1, 0], "modules": {"personnel": [1, 0]}}

# Sauvegarder la version mise √† jour
def save_version(data):
    with open(VERSION_FILE, "w") as file:
        json.dump(data, file, indent=4)

# Afficher la version actuelle
def display_version(data):
    version_str = f"V{'.'.join(map(str, data['version']))} - " + \
                  "[" + ", ".join(f"{mod}: {'.'.join(map(str, ver))}" for mod, ver in data['modules'].items()) + "]"
    print("\nüöÄ Version actuelle :", version_str)

# Ajouter un module
def add_module():
    data = load_version()
    module_name = input("Nom du module √† ajouter : ").strip()
    
    if module_name in data["modules"]:
        print(f"‚ö†Ô∏è Le module '{module_name}' existe d√©j√†.")
        return

    data["modules"][module_name] = [1, 0]  # Nouvelle version du module
    data["version"][1] += 1  # Incr√©mentation de la version mineure
    data["version"][2] = 0  # R√©initialisation du patch

    save_version(data)
    print(f"‚úÖ Module '{module_name}' ajout√© avec succ√®s !")
    display_version(data)

# Mettre √† jour un module
def update_module():
    data = load_version()
    module_name = input("Nom du module √† mettre √† jour : ").strip()

    if module_name not in data["modules"]:
        print(f"‚ö†Ô∏è Le module '{module_name}' n'existe pas.")
        return

    data["modules"][module_name][1] += 1  # Incr√©mentation de la version du module
    save_version(data)
    print(f"‚úÖ Module '{module_name}' mis √† jour !")
    display_version(data)

# Appliquer un patch
def apply_patch():
    data = load_version()
    data["version"][2] += 1  # Incr√©mentation du patch
    save_version(data)
    print("‚úÖ Patch appliqu√© !")
    display_version(data)

# Refonte majeure
def major_update():
    data = load_version()
    data["version"][0] += 1  # Incr√©mentation de la version majeure
    data["version"][1] = 0
    data["version"][2] = 0
    save_version(data)
    print("üöÄ Refonte majeure effectu√©e !")
    display_version(data)

# Menu interactif
def interactive_menu():
    while True:
        print("\n=== Gestionnaire de Version ===")
        print("1Ô∏è‚É£  Afficher la version actuelle")
        print("2Ô∏è‚É£  Ajouter un module")
        print("3Ô∏è‚É£  Mettre √† jour un module")
        print("4Ô∏è‚É£  Appliquer un patch")
        print("5Ô∏è‚É£  Refonte majeure")
        print("0Ô∏è‚É£  Quitter")

        choice = input("S√©lectionne une option : ").strip()

        if choice == "1":
            display_version(load_version())
        elif choice == "2":
            add_module()
        elif choice == "3":
            update_module()
        elif choice == "4":
            apply_patch()
        elif choice == "5":
            major_update()
        elif choice == "0":
            print("üëã Bye !")
            break
        else:
            print("‚ùå Option invalide, r√©essaye.")

# Lancer le menu interactif
if __name__ == "__main__":
    interactive_menu()
